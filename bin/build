#!/bin/bash

#
# Builds docker images for different minor versions of kubernetes
#

set -o errexit
set -o pipefail

KUBE_TAGS=$(curl -sSL https://registry.hub.docker.com/v1/repositories/mirrorgooglecontainers/kube-apiserver-amd64/tags)
MINOR_VERSION=$(curl -sSL https://storage.googleapis.com/kubernetes-release/release/stable.txt | cut -d "." -f2)
TAG=$2

build_minor() {

    KUBE_VERSION=$(echo $KUBE_TAGS | jq '.[] | .name' | grep v1.$1 | grep -v "-" | sort -r --version-sort | head -n1 | tr -d '"')

    docker build -t claranet/gcloud-kubectl-docker:latest --build-arg KUBE_VERSION=$KUBE_VERSION .
    
    docker tag claranet/gcloud-kubectl-docker:latest claranet/gcloud-kubectl-docker:${KUBE_VERSION}-${TAG}
    docker tag claranet/gcloud-kubectl-docker:latest claranet/gcloud-kubectl-docker:${KUBE_VERSION}-latest
    
    echo docker push claranet/gcloud-kubectl-docker:${KUBE_VERSION}-${TAG}
    echo docker push claranet/gcloud-kubectl-docker:${KUBE_VERSION}-latest

    [[ $minor = $MINOR_VERSION ]] && echo docker push claranet/gcloud-kubectl-docker:latest

    echo "---------------------------------------------------------------------------------"
}

print_usage() {
    printf "\nUsage: $0 <latest|last4minors> <TAG>\n\n"
    exit 1
}

[[ -z $TAG ]] && print_usage

case $1 in
    latest)
    	build_minor $MINOR_VERSION
		;;
	last4minors)
		for minor in $(seq $((MINOR_VERSION - 3)) $MINOR_VERSION); do
			build_minor $minor
		done
		;;
	*)
	    print_usage
esac
